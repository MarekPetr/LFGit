#!/bin/sh
# Runs a shell command (or interactive shell) using the binaries and
# libraries bundled with this app.
echo "executing runshell"
#set -e

os="Android"
base="/data/data/com.lfgit/files/usr"

if [ ! -d "$base" ]; then
    echo "** cannot find base directory (I seem to be $0)" >&2
    exit 1
fi

if [ ! -e "$base/bin/git-annex" ]; then
    echo "** base directory $base does not contain bin/git-annex" >&2
    exit 1
fi

# Get absolute path to base, to avoid breakage when things change directories.
orig="$(pwd)"
cd "$base"
base="$(pwd)"
cd "$orig"

# Set this variable when using this script inside a package of git-annex,
# which arranges for git-annex, git-annex-shell, and git to all be in the
# standard PATH. 
GIT_ANNEX_PACKAGE_INSTALL=
if [ -z "$GIT_ANNEX_PACKAGE_INSTALL" ]; then
    # Install shim that's used to run git-annex-shell from ssh authorized
    # keys. The assistant also does this when run, but the user may not
    # be using the assistant.
    if [ ! -e "$HOME/.ssh/git-annex-shell" ]; then
        mkdir "$HOME/.ssh" >/dev/null 2>&1 || true
        if [ -e "$HOME/.ssh" ]; then
            (
                echo "#!/bin/sh"
                echo "set -e"
                echo "if [ \"x\$SSH_ORIGINAL_COMMAND\" != \"x\" ]; then"
                echo "exec '$base/runshell' git-annex-shell -c \"\$SSH_ORIGINAL_COMMAND\""
                echo "else"
                echo "exec '$base/runshell' git-annex-shell -c \"\$@\""
                echo "fi"
            ) > "$HOME/.ssh/git-annex-shell"
            chmod +x "$HOME/.ssh/git-annex-shell"
        fi
    fi

    # And this shim is used by the webapp when adding a remote ssh server.
    if [ ! -e "$HOME/.ssh/git-annex-wrapper" ]; then
        mkdir "$HOME/.ssh" >/dev/null 2>&1 || true
        if [ -e "$HOME/.ssh" ]; then
            (
                echo "#!/bin/sh"
                echo "set -e"
                echo "exec '$base/runshell' \"\$@\""
            ) > "$HOME/.ssh/git-annex-wrapper"
            chmod +x "$HOME/.ssh/git-annex-wrapper"
        fi
    fi
fi

# Used by git-annex assistant to further install itself.
GIT_ANNEX_APP_BASE="$base"
export GIT_ANNEX_APP_BASE

# Put our binaries first, to avoid issues with out of date or incompatible
# system binaries. Extra binaries come after system path.
ORIG_PATH="$PATH"
export ORIG_PATH
PATH="$base/bin:$PATH:$base/extra"
export PATH

# These env vars are used by the shim wrapper around each binary.
#for lib in $(cat "$base/libdirs"); do
#    GIT_ANNEX_LD_LIBRARY_PATH="$base/$lib:$GIT_ANNEX_LD_LIBRARY_PATH"
#done

export GIT_ANNEX_LD_LIBRARY_PATH
GIT_ANNEX_DIR="$base"
export GIT_ANNEX_DIR

ORIG_GCONV_PATH="$GCONV_PATH"
export ORIG_GCONV_PATH
GCONV_PATH="$base/usr/lib/aarch64-linux-gnu/gconv"
export GCONV_PATH

ORIG_GIT_EXEC_PATH="$GIT_EXEC_PATH"
export ORIG_GIT_EXEC_PATH
GIT_EXEC_PATH="$base/libexec/git-core"
export GIT_EXEC_PATH

ORIG_GIT_TEMPLATE_DIR="$GIT_TEMPLATE_DIR"
export ORIG_GIT_TEMPLATE_DIR
GIT_TEMPLATE_DIR="$base/templates"
export GIT_TEMPLATE_DIR

ORIG_MANPATH="$MANPATH"
export ORIG_MANPATH
MANPATH="$base/usr/share/man:$MANPATH"
export MANPATH

# LD_PRELOAD may interact badly with the bundled libc and other libraries,
# which may have a different subarchitecture than the preloaded library.
unset LD_PRELOAD

# Avoid using system locales, which may interact badly with bundled libc.
# (But if LOCPATH is set, don't override it, and if GIT_ANNEX_PACKAGE_INSTALL
# is set, use the system locales.)
#
#DELETED LOCALES SETTING
useproot=1
        
# Store ssh connection caching sockets outside of sdcard.
GIT_ANNEX_TMP_DIR="$TMPDIR"
export GIT_ANNEX_TMP_DIR

GIT_ANNEX_STANDLONE_ENV="PATH GCONV_PATH MANPATH LOCPATH"
export GIT_ANNEX_STANDLONE_ENV

if [ "$1" ]; then
    cmd="$1"
    shift 1
else
    cmd=sh
fi

if [ -z "$tbase" ]; then
    if [ "$useproot" ]; then
        echo "exec proot bin/$cmd $@"
        exec proot "bin/$cmd" "$@"
    else
        exec "$cmd" "$@"
    fi
else
    # allow EXIT trap to cleanup
    if [ "$useproot" ]; then
        proot "$cmd" "$@"
    else
        "$cmd" "$@"
    fi
fi